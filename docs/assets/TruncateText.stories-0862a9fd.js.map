{"version":3,"file":"TruncateText.stories-0862a9fd.js","sources":["../../src/truncateText.js","../../src/components/TruncateText.jsx"],"sourcesContent":["export const DEFAULT_MAX_LINES = 4;\nexport const DEFAULT_WIDTH = 360;\nexport const DEFAULT_EXPAND_TEXT_LABEL = '... more';\n\n/**\n * Produces truncated version of text that fits within container of specified max number of lines and width.\n * Considers the style properties of text, and leaves room for an ending label/button.\n * @param {string} text The text to truncate\n * @param {number=} maxLines The max number of lines which the text should occupy after truncation\n * @param {number=} width Width of container displaying truncated text\n * @param {string=} expandTextLabel The label of the button to expand the text (Used to calculate truncated text)\n * @param {Object.<string, string>=} styles Styles to apply to text size calculation (i.e. font, letter-spacing)\n * @returns {{ text: string, isTruncated: boolean }} Object containing output value and truncated status\n */\nexport function truncateText(\n  text,\n  maxLines = DEFAULT_MAX_LINES,\n  width = DEFAULT_WIDTH,\n  expandTextLabel = DEFAULT_EXPAND_TEXT_LABEL,\n  styles = undefined\n) {\n  let isTruncated = false;\n  const lineContainer = document.createElement('span');\n  if (styles) {\n    Object.entries(styles).forEach(([prop, value]) => {\n      lineContainer.style[prop] = value;\n    });\n  }\n  lineContainer.style.zIndex = '-1';\n  lineContainer.style.visibility = 'hidden';\n  lineContainer.style.position = 'absolute';\n  lineContainer.style.top = '0';\n  lineContainer.style.left = '0';\n\n  const textArray = splitStringOnSpacesAndNewlines(text);\n\n  document.body.appendChild(lineContainer);\n\n  let textArrayIndex = 0;\n  let linesRemaining = maxLines;\n  let lineContent = '';\n  let previousLineContent = '';\n  let truncatedText = '';\n\n  while (linesRemaining > 0 && textArrayIndex < textArray.length) {\n    lineContent = '';\n    lineContainer.innerText = '';\n\n    if (linesRemaining === 1) {\n      // Add expandTextLabel to lineContent to include in width of last line before truncation; will remove it from beginning of value later\n      lineContent = expandTextLabel;\n    }\n\n    while (\n      lineContainer.clientWidth < width &&\n      textArrayIndex < textArray.length\n    ) {\n      previousLineContent = lineContent; // To restore previous content in case next word added results in text overflow\n\n      if (textArray[textArrayIndex] === ' ') {\n        lineContent += ' ';\n      } else if (textArray[textArrayIndex] === '\\n') {\n        lineContent += '\\n';\n        textArrayIndex++;\n        break;\n      } else {\n        lineContent += textArray[textArrayIndex] + ' ';\n      }\n\n      lineContainer.innerText = lineContent;\n      if (lineContainer.clientWidth >= width) {\n        lineContent = previousLineContent;\n        lineContainer.innerText = lineContent;\n        break;\n      } else {\n        textArrayIndex++;\n        if (lineContainer.clientWidth === width) {\n          break;\n        }\n      }\n    }\n\n    if (linesRemaining === 1) {\n      // Remove expandTextLabel from beginning of line\n      lineContent = lineContent.slice(expandTextLabel.length);\n      lineContainer.innerText = lineContent;\n\n      if (lineContent === '\\n') {\n        // Remove trailing newlines of truncated text\n        while (truncatedText.endsWith('\\n')) {\n          truncatedText = truncatedText.trimEnd();\n        }\n        isTruncated = true;\n      } else if (lineContent.endsWith('\\n')) {\n        isTruncated = true;\n      } else if (textArrayIndex <= textArray.length - 1) {\n        // Check if remaining text can fit without truncation\n        let currentTextArrayIndex = textArrayIndex;\n        let currentLineContent = lineContent;\n\n        // eslint-disable-next-line no-loop-func\n        const isWordsRemaining = () => textArrayIndex <= textArray.length - 1;\n        while (isWordsRemaining() && lineContainer.clientWidth <= width) {\n          if (textArray[textArrayIndex] === '\\n') {\n            break;\n          } else {\n            lineContent += textArray[textArrayIndex] + ' ';\n          }\n          lineContainer.innerText = lineContent;\n          textArrayIndex++;\n        }\n\n        const isLastIndexReached = textArrayIndex > textArray.length - 1;\n        isTruncated = !isLastIndexReached || lineContainer.clientWidth > width;\n        if (isTruncated) {\n          lineContent = currentLineContent;\n          textArrayIndex = currentTextArrayIndex;\n        }\n      }\n\n      if (isTruncated) {\n        // Remove spaces at end\n        lineContent = lineContent.trimEnd();\n      }\n    }\n\n    truncatedText += lineContent;\n\n    linesRemaining--;\n  }\n\n  document.body.removeChild(lineContainer);\n\n  return { text: truncatedText, isTruncated: isTruncated };\n}\n\n/**\n * Produces array composed of string which is split on spaces, including entries for newlines and consecutive spaces.\n * @param {string} string The string to split\n * @returns {string[]} The split string\n */\nfunction splitStringOnSpacesAndNewlines(string) {\n  let array = [];\n  let word = '';\n  for (let char of string.split('')) {\n    if (char === ' ') {\n      if (word) {\n        array.push(word);\n        word = '';\n      } else {\n        array.push(char);\n      }\n    } else if (char === '\\n') {\n      if (word) {\n        array.push(word);\n        word = '';\n      }\n      array.push(char);\n    } else {\n      word += char;\n    }\n  }\n  if (word) {\n    array.push(word);\n    word = '';\n  }\n  return array;\n}\n","import {\n  truncateText,\n  DEFAULT_MAX_LINES,\n  DEFAULT_WIDTH,\n  DEFAULT_EXPAND_TEXT_LABEL,\n} from '../truncateText';\n\nexport { DEFAULT_MAX_LINES, DEFAULT_WIDTH, DEFAULT_EXPAND_TEXT_LABEL };\n\nexport default function TruncateText({\n  children = '',\n  maxLines = DEFAULT_MAX_LINES,\n  width = DEFAULT_WIDTH,\n  expandTextLabel,\n  styles,\n}) {\n  const { text: truncatedText, isTruncated } = truncateText(\n    children,\n    maxLines,\n    width,\n    expandTextLabel,\n    styles\n  );\n\n  if (isTruncated) {\n    return (\n      <>\n        {truncatedText} <ExpandTextLabel />\n      </>\n    );\n  }\n\n  return children;\n}\n\nfunction ExpandTextLabel({ label = DEFAULT_EXPAND_TEXT_LABEL }) {\n  return <span style={{ whiteSpace: 'nowrap' }}>{label}</span>;\n}\n"],"names":["DEFAULT_MAX_LINES","DEFAULT_WIDTH","DEFAULT_EXPAND_TEXT_LABEL","truncateText","text","maxLines","width","expandTextLabel","styles","isTruncated","lineContainer","prop","value","textArray","splitStringOnSpacesAndNewlines","textArrayIndex","linesRemaining","lineContent","previousLineContent","truncatedText","currentTextArrayIndex","currentLineContent","isWordsRemaining","string","array","word","char","TruncateText","children","jsxs","Fragment","ExpandTextLabel","label"],"mappings":"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"}